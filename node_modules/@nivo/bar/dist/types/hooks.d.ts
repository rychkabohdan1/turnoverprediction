import { Margin } from '@nivo/core';
import { DataProps, BarCommonProps, BarDatum, ComputedBarDatumWithValue, LegendData, BarLegendProps } from './types';
export declare const useBar: <RawDatum extends BarDatum>({ indexBy, keys, label, tooltipLabel, valueFormat, colors, colorBy, borderColor, labelTextColor, groupMode, layout, reverse, data, minValue, maxValue, margin, width, height, padding, innerPadding, valueScale, indexScale, initialHiddenIds, enableLabel, labelSkipWidth, labelSkipHeight, legends, legendLabel, totalsOffset, }: {
    indexBy?: BarCommonProps<RawDatum>["indexBy"];
    label?: BarCommonProps<RawDatum>["label"];
    tooltipLabel?: BarCommonProps<RawDatum>["tooltipLabel"];
    valueFormat?: BarCommonProps<RawDatum>["valueFormat"];
    colors?: BarCommonProps<RawDatum>["colors"];
    colorBy?: BarCommonProps<RawDatum>["colorBy"];
    borderColor?: BarCommonProps<RawDatum>["borderColor"];
    labelTextColor?: BarCommonProps<RawDatum>["labelTextColor"];
    groupMode?: BarCommonProps<RawDatum>["groupMode"];
    layout?: BarCommonProps<RawDatum>["layout"];
    reverse?: BarCommonProps<RawDatum>["reverse"];
    data: DataProps<RawDatum>["data"];
    keys?: BarCommonProps<RawDatum>["keys"];
    minValue?: BarCommonProps<RawDatum>["minValue"];
    maxValue?: BarCommonProps<RawDatum>["maxValue"];
    margin: Margin;
    width: number;
    height: number;
    padding?: BarCommonProps<RawDatum>["padding"];
    innerPadding?: BarCommonProps<RawDatum>["innerPadding"];
    valueScale?: BarCommonProps<RawDatum>["valueScale"];
    indexScale?: BarCommonProps<RawDatum>["indexScale"];
    initialHiddenIds?: BarCommonProps<RawDatum>["initialHiddenIds"];
    enableLabel?: BarCommonProps<RawDatum>["enableLabel"];
    labelSkipWidth?: BarCommonProps<RawDatum>["labelSkipWidth"];
    labelSkipHeight?: BarCommonProps<RawDatum>["labelSkipHeight"];
    legends?: BarCommonProps<RawDatum>["legends"];
    legendLabel?: BarCommonProps<RawDatum>["legendLabel"];
    totalsOffset?: BarCommonProps<RawDatum>["totalsOffset"];
}) => {
    bars: import("./types").ComputedBarDatum<RawDatum>[];
    barsWithValue: {
        index: number;
        key: string;
        data: import("./types").ComputedDatum<RawDatum> & {
            value: number;
        };
        x: number;
        y: number;
        absX: number;
        absY: number;
        width: number;
        height: number;
        color: string;
        label: string;
    }[];
    xScale: import("@nivo/scales").ScaleLog | import("@nivo/scales").ScaleSymlog | import("@nivo/scales").ScaleLinear<number> | import("@nivo/scales").ScaleTime<Date | import("d3-scale").NumberValue> | import("@nivo/scales").ScaleBand<string> | import("@nivo/scales").ScalePoint<Date | import("@nivo/scales").NumericValue | import("@nivo/scales").StringValue> | import("@nivo/scales").ScaleBand<Date | import("@nivo/scales").NumericValue | import("@nivo/scales").StringValue>;
    yScale: import("@nivo/scales").ScaleLog | import("@nivo/scales").ScaleSymlog | import("@nivo/scales").ScaleLinear<number> | import("@nivo/scales").ScaleTime<Date | import("d3-scale").NumberValue> | import("@nivo/scales").ScaleBand<string> | import("@nivo/scales").ScalePoint<Date | import("@nivo/scales").NumericValue | import("@nivo/scales").StringValue> | import("@nivo/scales").ScaleBand<Date | import("@nivo/scales").NumericValue | import("@nivo/scales").StringValue>;
    getIndex: (datum: RawDatum) => string;
    getLabel: (datum: import("./types").ComputedDatum<RawDatum>) => string;
    getTooltipLabel: (datum: import("./types").ComputedDatum<RawDatum>) => string;
    formatValue: (value: number) => string;
    getColor: import("@nivo/colors").OrdinalColorScale<import("./types").ComputedDatum<RawDatum>>;
    getBorderColor: import("@nivo/colors").InheritedColorConfigCustomFunction<ComputedBarDatumWithValue<RawDatum>> | ((d: ComputedBarDatumWithValue<RawDatum>) => any);
    getLabelColor: import("@nivo/colors").InheritedColorConfigCustomFunction<ComputedBarDatumWithValue<RawDatum>> | ((d: ComputedBarDatumWithValue<RawDatum>) => any);
    shouldRenderBarLabel: ({ width, height }: {
        height: number;
        width: number;
    }) => boolean;
    hiddenIds: readonly (string | number)[];
    toggleSerie: (id: string | number) => void;
    legendsWithData: [BarLegendProps, LegendData[]][];
    barTotals: import("./compute/totals").BarTotalsData[];
};
//# sourceMappingURL=hooks.d.ts.map