{"version":3,"file":"nivo-scales.mjs","sources":["../src/timeHelpers.ts","../src/linearScale.ts","../src/pointScale.ts","../src/bandScale.ts","../src/timeScale.ts","../src/logScale.ts","../src/symlogScale.ts","../src/compute.ts","../src/ticks.ts"],"sourcesContent":["import { timeParse, utcParse } from 'd3-time-format'\n\nexport const timePrecisions = [\n    'millisecond',\n    'second',\n    'minute',\n    'hour',\n    'day',\n    'month',\n    'year',\n] as const\n\nexport type TIME_PRECISION = (typeof timePrecisions)[number]\n\nexport const precisionCutOffs: ((date: Date) => void)[] = [\n    date => date.setMilliseconds(0),\n    date => date.setSeconds(0),\n    date => date.setMinutes(0),\n    date => date.setHours(0),\n    date => date.setDate(1),\n    date => date.setMonth(0),\n]\n\nexport const precisionCutOffsByType: Record<TIME_PRECISION, ((date: Date) => void)[]> = {\n    millisecond: [],\n    second: precisionCutOffs.slice(0, 1),\n    minute: precisionCutOffs.slice(0, 2),\n    hour: precisionCutOffs.slice(0, 3),\n    day: precisionCutOffs.slice(0, 4),\n    month: precisionCutOffs.slice(0, 5),\n    year: precisionCutOffs.slice(0, 6),\n}\n\nexport const createPrecisionMethod = (precision: TIME_PRECISION) => (date: Date) => {\n    precisionCutOffsByType[precision].forEach(cutOff => {\n        cutOff(date)\n    })\n\n    return date\n}\n\nexport const createDateNormalizer = ({\n    format = 'native',\n    precision = 'millisecond',\n    useUTC = true,\n}: {\n    format?: 'native' | string\n    precision?: TIME_PRECISION\n    useUTC?: boolean\n}) => {\n    const precisionFn = createPrecisionMethod(precision)\n\n    return (value: Date | string | undefined) => {\n        if (value === undefined) {\n            return value\n        }\n\n        if (format === 'native' || value instanceof Date) {\n            return precisionFn(value as Date)\n        }\n\n        const parseTime = useUTC ? utcParse(format) : timeParse(format)\n        return precisionFn(parseTime(value as string) as Date)\n    }\n}\n","import { NumberValue, scaleLinear, ScaleLinear as D3ScaleLinear } from 'd3-scale'\nimport { ScaleLinearSpec, ScaleLinear, ComputedSerieAxis, ScaleAxis } from './types'\nimport { interpolateRound, interpolateNumber } from 'd3-interpolate'\n\nexport const createLinearScale = <Output extends NumberValue>(\n    {\n        min = 0,\n        max = 'auto',\n        stacked = false,\n        reverse = false,\n        clamp = false,\n        nice = false,\n        round = true,\n    }: ScaleLinearSpec,\n    data: ComputedSerieAxis<Output>,\n    size: number,\n    axis: ScaleAxis\n) => {\n    let minValue: NumberValue\n    if (min === 'auto') {\n        minValue = stacked === true ? (data.minStacked ?? 0) : data.min\n    } else {\n        minValue = min\n    }\n\n    let maxValue: NumberValue\n    if (max === 'auto') {\n        maxValue = stacked === true ? (data.maxStacked ?? 0) : data.max\n    } else {\n        maxValue = max\n    }\n\n    const scale = scaleLinear<number, Output>()\n        .range(axis === 'x' ? [0, size] : [size, 0])\n        .interpolate(round ? interpolateRound : interpolateNumber)\n        .domain(reverse ? [maxValue, minValue] : [minValue, maxValue])\n        .clamp(clamp)\n\n    if (nice === true) scale.nice()\n    else if (typeof nice === 'number') scale.nice(nice)\n\n    return castLinearScale(scale, stacked)\n}\n\nexport const castLinearScale = <Range, Output>(\n    scale: D3ScaleLinear<Range, Output>,\n    stacked = false\n) => {\n    const typedScale = scale as unknown as ScaleLinear<number>\n    typedScale.type = 'linear'\n    typedScale.stacked = stacked\n\n    return typedScale\n}\n","import { scalePoint, ScalePoint as D3ScalePoint } from 'd3-scale'\nimport { ComputedSerieAxis, ScalePoint, ScalePointSpec, StringValue } from './types'\n\nexport const createPointScale = <Input extends StringValue>(\n    _spec: ScalePointSpec,\n    data: ComputedSerieAxis<Input>,\n    size: number\n) => {\n    const scale = scalePoint<Input>().range([0, size]).domain(data.all)\n\n    const typedScale = scale as ScalePoint<Input>\n    typedScale.type = 'point'\n\n    return typedScale\n}\n\nexport const castPointScale = <Input extends StringValue>(scale: D3ScalePoint<Input>) => {\n    const typedScale = scale as ScalePoint<Input>\n    typedScale.type = 'point'\n\n    return typedScale\n}\n","import { scaleBand, ScaleBand as D3ScaleBand } from 'd3-scale'\nimport { ComputedSerieAxis, ScaleBand, ScaleBandSpec, StringValue, ScaleAxis } from './types'\n\nexport const createBandScale = <Input extends StringValue>(\n    { round = true }: ScaleBandSpec,\n    data: ComputedSerieAxis<Input>,\n    size: number,\n    axis: ScaleAxis\n) => {\n    const scale = scaleBand<Input>()\n        .range(axis === 'x' ? [0, size] : [size, 0])\n        .domain(data.all)\n        .round(round)\n\n    return castBandScale<Input>(scale)\n}\n\nexport const castBandScale = <Input extends StringValue>(scale: D3ScaleBand<Input>) => {\n    const typedScale = scale as ScaleBand<Input>\n    typedScale.type = 'band'\n\n    return typedScale\n}\n","import { NumberValue, scaleTime, scaleUtc } from 'd3-scale'\nimport { createDateNormalizer } from './timeHelpers'\nimport { ComputedSerieAxis, ScaleTime, ScaleTimeSpec } from './types'\n\nexport const createTimeScale = <Input extends Date | NumberValue>(\n    {\n        format = 'native',\n        precision = 'millisecond',\n        min = 'auto',\n        max = 'auto',\n        useUTC = true,\n        nice = false,\n    }: ScaleTimeSpec,\n    data: ComputedSerieAxis<string | Date>,\n    size: number\n) => {\n    const normalize = createDateNormalizer({ format, precision, useUTC })\n\n    let minValue: Date | undefined\n    if (min === 'auto') {\n        minValue = normalize(data.min)\n    } else if (format !== 'native') {\n        minValue = normalize(min)\n    } else {\n        minValue = min as Date\n    }\n\n    let maxValue: Date | undefined\n    if (max === 'auto') {\n        maxValue = normalize(data.max)\n    } else if (format !== 'native') {\n        maxValue = normalize(max)\n    } else {\n        maxValue = max as Date\n    }\n\n    const scale = useUTC ? scaleUtc() : scaleTime()\n\n    scale.range([0, size])\n\n    if (minValue && maxValue) scale.domain([minValue, maxValue])\n\n    if (nice === true) scale.nice()\n    else if (typeof nice === 'object' || typeof nice === 'number') scale.nice(nice)\n\n    const typedScale = scale as unknown as ScaleTime<Input>\n\n    typedScale.type = 'time'\n    typedScale.useUTC = useUTC\n\n    return typedScale\n}\n","import { scaleLog } from 'd3-scale'\nimport { ComputedSerieAxis, ScaleAxis, ScaleLog, ScaleLogSpec } from './types'\n\nexport const createLogScale = (\n    { base = 10, min = 'auto', max = 'auto' }: ScaleLogSpec,\n    data: ComputedSerieAxis<number>,\n    size: number,\n    axis: ScaleAxis\n) => {\n    const hasZero = data.all.some(v => v === 0)\n    if (hasZero) {\n        throw new Error(`a log scale domain must not include or cross zero`)\n    }\n\n    let sign: number\n    let hasMixedSign = false\n    data.all\n        .filter(v => v != null)\n        .forEach(v => {\n            if (hasMixedSign) return\n            if (sign === undefined) {\n                sign = Math.sign(v)\n            } else if (Math.sign(v) !== sign) {\n                hasMixedSign = true\n            }\n        })\n\n    if (hasMixedSign) {\n        throw new Error(`a log scale domain must be strictly-positive or strictly-negative`)\n    }\n\n    let minValue: number\n    if (min === 'auto') {\n        minValue = data.min\n    } else {\n        minValue = min\n    }\n\n    let maxValue: number\n    if (max === 'auto') {\n        maxValue = data.max\n    } else {\n        maxValue = max\n    }\n\n    const scale = scaleLog<number, number>()\n        .domain([minValue, maxValue])\n        .rangeRound(axis === 'x' ? [0, size] : [size, 0])\n        .base(base)\n        .nice()\n\n    const typedScale = scale as ScaleLog\n    typedScale.type = 'log'\n\n    return typedScale\n}\n","import { scaleSymlog } from 'd3-scale'\nimport { ComputedSerieAxis, ScaleAxis, ScaleSymlog, ScaleSymlogSpec } from './types'\n\nexport const createSymlogScale = (\n    {\n        constant = 1,\n        min = 'auto',\n        max = 'auto',\n        round = true,\n        reverse = false,\n        nice = true,\n    }: ScaleSymlogSpec,\n    data: ComputedSerieAxis<number>,\n    size: number,\n    axis: ScaleAxis\n) => {\n    let minValue: number\n    if (min === 'auto') {\n        minValue = data.min\n    } else {\n        minValue = min\n    }\n\n    let maxValue: number\n    if (max === 'auto') {\n        maxValue = data.max\n    } else {\n        maxValue = max\n    }\n\n    const scale = scaleSymlog<number, number>().constant(constant)\n\n    const range = axis === 'x' ? [0, size] : [size, 0]\n    if (round === true) scale.rangeRound(range)\n    else scale.range(range)\n\n    if (reverse === true) scale.domain([maxValue, minValue])\n    else scale.domain([minValue, maxValue])\n\n    if (nice === true) scale.nice()\n    else if (typeof nice === 'number') scale.nice(nice)\n\n    const typedScale = scale as ScaleSymlog\n    typedScale.type = 'symlog'\n\n    return typedScale\n}\n","import uniq from 'lodash/uniq.js'\nimport uniqBy from 'lodash/uniqBy.js'\nimport sortBy from 'lodash/sortBy.js'\nimport last from 'lodash/last.js'\nimport isDate from 'lodash/isDate.js'\nimport { createDateNormalizer } from './timeHelpers'\nimport { ScaleAxis, ScaleSpec, ScaleValue, SerieAxis, ComputedSerieAxis } from './types'\nimport { createLinearScale } from './linearScale'\nimport { createPointScale } from './pointScale'\nimport { createBandScale } from './bandScale'\nimport { createTimeScale } from './timeScale'\nimport { createLogScale } from './logScale'\nimport { createSymlogScale } from './symlogScale'\n\ntype XY = ReturnType<typeof generateSeriesXY>\n\ntype StackedXY = {\n    [K in keyof XY]: XY[K] & {\n        maxStacked: number\n        minStacked: number\n    }\n}\n\ninterface SerieDatum {\n    x: number | string | Date | null\n    // only numbers can be stacked\n    xStacked?: number | null\n    y: number | string | Date | null\n    // only numbers can be stacked\n    yStacked?: number | null\n}\n\ntype Serie<S = never, D extends SerieDatum = SerieDatum> = S & {\n    data: readonly D[]\n}\n\ntype NestedSerie<S = never, D extends SerieDatum = SerieDatum> = S & {\n    data: {\n        data: D\n    }[]\n}\n\nexport type ComputedSerie<S = never, D extends SerieDatum = SerieDatum> = S & {\n    data: {\n        data: D\n        position: {\n            x: number | null\n            y: number | null\n        }\n    }[]\n}\n\ntype Compare = <T>(a: T, b: T) => boolean\n\nexport const getOtherAxis = (axis: ScaleAxis): ScaleAxis => (axis === 'x' ? 'y' : 'x')\n\nexport const compareValues = (a: string | number, b: string | number) => a === b\nexport const compareDateValues = (a: Date, b: Date) => a.getTime() === b.getTime()\n\nexport function computeScale<Input extends ScaleValue>(\n    spec: ScaleSpec,\n    data: ComputedSerieAxis<any>,\n    size: number,\n    axis: ScaleAxis\n) {\n    switch (spec.type) {\n        case 'linear':\n            return createLinearScale(spec, data, size, axis)\n        case 'point':\n            return createPointScale<Exclude<Input, null>>(spec, data, size)\n        case 'band':\n            return createBandScale<Exclude<Input, null>>(spec, data, size, axis)\n        case 'time':\n            return createTimeScale(spec, data, size)\n        case 'log':\n            return createLogScale(spec, data, size, axis)\n        case 'symlog':\n            return createSymlogScale(spec, data, size, axis)\n        default:\n            throw new Error('invalid scale spec')\n    }\n}\n\n/**\n * Convert serie data to have the original data stored in a nested prop.\n *\n * We do this in order to avoid conflicts between raw & computed properties.\n * <- { data: { x: 1, y: 3 }[] }\n * -> { data: { data: { x: 1, y: 3 } }[] }\n */\nconst nestSerieData = <S = never, D extends SerieDatum = SerieDatum>(\n    serie: Serie<S, D>\n): NestedSerie<S, D> => ({\n    ...serie,\n    data: serie.data.map(d => ({ data: { ...d } })),\n})\n\nconst getDatumAxisPosition = <D extends SerieDatum = SerieDatum>(\n    datum: { data: D },\n    axis: ScaleAxis,\n    scale: any\n): number | null => {\n    if ('stacked' in scale && scale.stacked) {\n        const stackedValue = datum.data[axis === 'x' ? 'xStacked' : 'yStacked']\n        if (stackedValue === null || stackedValue === undefined) {\n            return null\n        }\n\n        return scale(stackedValue)\n    }\n\n    return scale(datum.data[axis]) ?? null\n}\n\n/**\n * Compute x/y d3 scales from an array of data series, and scale specifications.\n *\n * We use generics as it's not uncommon to have extra properties such as an id\n * added to the series, or extra props on data, in such case, you should override\n * the default types.\n */\nexport const computeXYScalesForSeries = <S = never, D extends SerieDatum = SerieDatum>(\n    series: Serie<S, D>[],\n    xScaleSpec: ScaleSpec,\n    yScaleSpec: ScaleSpec,\n    width: number,\n    height: number\n) => {\n    // first nest series to avoid property conflicts\n    const nestedSeries = series.map(serie => nestSerieData<S, D>(serie))\n\n    // then compute data for each axis: all, min, max values\n    const xy = generateSeriesXY<S, D>(nestedSeries, xScaleSpec, yScaleSpec)\n\n    // stack x values depending on xScale\n    if ('stacked' in xScaleSpec && xScaleSpec.stacked === true) {\n        stackX<S, D>(xy as StackedXY, nestedSeries)\n    }\n\n    // stack y values depending on yScale\n    if ('stacked' in yScaleSpec && yScaleSpec.stacked === true) {\n        stackY<S, D>(xy as StackedXY, nestedSeries)\n    }\n\n    // computes scales\n    const xScale = computeScale<D['x']>(xScaleSpec, xy.x, width, 'x')\n    const yScale = computeScale<D['y']>(yScaleSpec, xy.y, height, 'y')\n\n    // assign position to each datum in every scale\n    const computedSeries: ComputedSerie<S, D>[] = nestedSeries.map(serie => ({\n        ...serie,\n        data: serie.data.map(datum => ({\n            ...datum,\n            position: {\n                x: getDatumAxisPosition(datum, 'x', xScale),\n                y: getDatumAxisPosition(datum, 'y', yScale),\n            },\n        })),\n    }))\n\n    return {\n        ...xy,\n        series: computedSeries,\n        xScale,\n        yScale,\n    }\n}\n\nexport const generateSeriesXY = <S = never, D extends SerieDatum = SerieDatum>(\n    series: NestedSerie<S, D>[],\n    xScaleSpec: ScaleSpec,\n    yScaleSpec: ScaleSpec\n) => ({\n    x: generateSeriesAxis<'x', D['x']>(series, 'x', xScaleSpec),\n    y: generateSeriesAxis<'y', D['y']>(series, 'y', yScaleSpec),\n})\n\n/**\n * Normalize data according to scale type, (time => Date, linear => Number)\n * compute sorted unique values and min/max.\n */\nexport const generateSeriesAxis = <Axis extends ScaleAxis, Value extends ScaleValue>(\n    series: SerieAxis<Axis, Value>,\n    axis: Axis,\n    scaleSpec: ScaleSpec,\n    {\n        getValue = d => d.data[axis],\n        setValue = (d, v) => {\n            d.data[axis] = v\n        },\n    }: {\n        getValue?: (d: { data: Record<Axis, Value | null> }) => Value | null\n        setValue?: (d: { data: Record<Axis, Value | null> }, v: Value) => void\n    } = {}\n) => {\n    if (scaleSpec.type === 'linear') {\n        series.forEach(serie => {\n            serie.data.forEach(d => {\n                const value = getValue(d)\n\n                if (value) {\n                    setValue(d, parseFloat(String(value)) as unknown as Value)\n                }\n            })\n        })\n    } else if (scaleSpec.type === 'time' && scaleSpec.format !== 'native') {\n        // `native` means we already have Date instances,\n        // otherwise we have to convert the values to Date.\n        const parseTime = createDateNormalizer(scaleSpec)\n\n        series.forEach(serie => {\n            serie.data.forEach(d => {\n                const value = getValue(d)\n\n                if (value) {\n                    setValue(d, parseTime(value as Date) as unknown as Value)\n                }\n            })\n        })\n    }\n\n    const values: unknown[] = []\n\n    series.forEach(serie => {\n        serie.data.forEach(d => {\n            values.push(getValue(d))\n        })\n    })\n\n    switch (scaleSpec.type) {\n        case 'linear': {\n            const all = sortBy(\n                // filer null values to deal with holes in linechart\n                uniq(values as number[]).filter(v => v !== null),\n                v => v\n            )\n\n            return { all, min: Math.min(...all), max: Math.max(...all) }\n        }\n        case 'time': {\n            const all = uniqBy(values as Date[], v => v.getTime())\n                .slice(0)\n                .sort((a, b) => b.getTime() - a.getTime())\n                .reverse()\n\n            return { all, min: all[0], max: last(all) }\n        }\n        default: {\n            const all = uniq(values)\n\n            return { all, min: all[0], max: last(all) }\n        }\n    }\n}\n\nexport const stackAxis = <S = never, D extends SerieDatum = SerieDatum>(\n    axis: ScaleAxis,\n    xy: StackedXY,\n    series: NestedSerie<S, D>[]\n) => {\n    const otherAxis = getOtherAxis(axis)\n    const all: number[] = []\n\n    xy[otherAxis].all.forEach(v => {\n        const compare = (isDate(v) ? compareDateValues : compareValues) as Compare\n        const stack: Array<number | null> = []\n\n        series.forEach(serie => {\n            const datum = serie.data.find(d => compare(d.data[otherAxis], v))\n            let value = null\n            let stackValue = null\n\n            if (datum !== undefined) {\n                // stacked values only support numbers\n                value = datum.data[axis] as number\n                if (value !== null) {\n                    const head = last(stack)\n                    if (head === undefined) {\n                        stackValue = value\n                    } else if (head !== null) {\n                        stackValue = head + value\n                    }\n                }\n\n                datum.data[axis === 'x' ? 'xStacked' : 'yStacked'] = stackValue\n            }\n\n            stack.push(stackValue)\n\n            if (stackValue !== null) {\n                all.push(stackValue)\n            }\n        })\n    })\n\n    xy[axis].minStacked = Math.min(...all)\n    xy[axis].maxStacked = Math.max(...all)\n}\n\nconst stackX = <S = never, D extends SerieDatum = SerieDatum>(\n    xy: StackedXY,\n    series: NestedSerie<S, D>[]\n) => stackAxis<S, D>('x', xy, series)\n\nconst stackY = <S = never, D extends SerieDatum = SerieDatum>(\n    xy: StackedXY,\n    series: NestedSerie<S, D>[]\n) => stackAxis<S, D>('y', xy, series)\n","import {\n    CountableTimeInterval,\n    timeMillisecond,\n    utcMillisecond,\n    timeSecond,\n    utcSecond,\n    timeMinute,\n    utcMinute,\n    timeHour,\n    utcHour,\n    timeWeek,\n    utcWeek,\n    timeSunday,\n    utcSunday,\n    timeMonday,\n    utcMonday,\n    timeTuesday,\n    utcTuesday,\n    timeWednesday,\n    utcWednesday,\n    timeThursday,\n    utcThursday,\n    timeFriday,\n    utcFriday,\n    timeSaturday,\n    utcSaturday,\n    timeMonth,\n    utcMonth,\n    timeYear,\n    utcYear,\n    timeInterval,\n} from 'd3-time'\nimport { ScaleValue, TicksSpec, AnyScale, ScaleWithBandwidth } from './types'\n\n/**\n * Band and point scales are not centered, meaning the ticks would\n * be positioned at the beginning of each step; however, we want\n * them to be centered for each step.\n */\nexport const centerScale = <Value>(scale: ScaleWithBandwidth) => {\n    const bandwidth = scale.bandwidth()\n\n    if (bandwidth === 0) return scale\n\n    let offset = bandwidth / 2\n    if (scale.round()) {\n        offset = Math.round(offset)\n    }\n\n    return <T extends Value>(d: T) => (scale(d) ?? 0) + offset\n}\n\nconst timeDay = timeInterval(\n    date => date.setHours(0, 0, 0, 0),\n    (date, step) => date.setDate(date.getDate() + step),\n    (start, end) => (end.getTime() - start.getTime()) / 864e5,\n    date => Math.floor(date.getTime() / 864e5)\n)\n\nconst utcDay = timeInterval(\n    date => date.setUTCHours(0, 0, 0, 0),\n    (date, step) => date.setUTCDate(date.getUTCDate() + step),\n    (start, end) => (end.getTime() - start.getTime()) / 864e5,\n    date => Math.floor(date.getTime() / 864e5)\n)\n\nconst timeByType: Record<string, [CountableTimeInterval, CountableTimeInterval]> = {\n    millisecond: [timeMillisecond, utcMillisecond],\n    second: [timeSecond, utcSecond],\n    minute: [timeMinute, utcMinute],\n    hour: [timeHour, utcHour],\n    day: [timeDay, utcDay],\n    week: [timeWeek, utcWeek],\n    sunday: [timeSunday, utcSunday],\n    monday: [timeMonday, utcMonday],\n    tuesday: [timeTuesday, utcTuesday],\n    wednesday: [timeWednesday, utcWednesday],\n    thursday: [timeThursday, utcThursday],\n    friday: [timeFriday, utcFriday],\n    saturday: [timeSaturday, utcSaturday],\n    month: [timeMonth, utcMonth],\n    year: [timeYear, utcYear],\n}\n\nconst timeTypes = Object.keys(timeByType)\nconst timeIntervalRegexp = new RegExp(`^every\\\\s*(\\\\d+)?\\\\s*(${timeTypes.join('|')})s?$`, 'i')\n\nconst isInteger = (value: unknown): value is number =>\n    typeof value === 'number' && isFinite(value) && Math.floor(value) === value\n\nexport const getScaleTicks = <Value extends ScaleValue>(\n    scale: AnyScale,\n    spec?: TicksSpec<Value>\n) => {\n    // specific values\n    if (Array.isArray(spec)) {\n        return spec\n    }\n\n    if (typeof spec === 'string' && 'useUTC' in scale) {\n        // time interval\n        const matches = spec.match(timeIntervalRegexp)\n\n        if (matches) {\n            const [, amount, type] = matches\n            // UTC is used as it's more predictable,\n            // however, local time could be used too\n            // let's see how it fits users' requirements\n            const timeType = timeByType[type][scale.useUTC ? 1 : 0]\n\n            if (type === 'day') {\n                const [start, originalStop] = scale.domain()\n                const stop = new Date(originalStop)\n\n                // Set range to include last day in the domain since `interval.range` function is exclusive stop\n                stop.setDate(stop.getDate() + 1)\n\n                return timeType.every(Number(amount ?? 1))?.range(start, stop) ?? []\n            }\n\n            if (amount === undefined) {\n                return scale.ticks(timeType)\n            }\n\n            const interval = timeType.every(Number(amount))\n\n            if (interval) {\n                return scale.ticks(interval)\n            }\n        }\n\n        throw new Error(`Invalid tickValues: ${spec}`)\n    }\n\n    // continuous scales\n    if ('ticks' in scale) {\n        // default behaviour\n        if (spec === undefined) {\n            return scale.ticks()\n        }\n\n        // specific tick count\n        if (isInteger(spec)) {\n            return scale.ticks(spec)\n        }\n    }\n\n    // non linear scale default\n    return scale.domain()\n}\n"],"names":["timePrecisions","precisionCutOffs","date","setMilliseconds","setSeconds","setMinutes","setHours","setDate","setMonth","precisionCutOffsByType","millisecond","second","slice","minute","hour","day","month","year","createPrecisionMethod","precision","forEach","cutOff","createDateNormalizer","_ref","_ref$format","format","_ref$precision","_ref$useUTC","useUTC","precisionFn","value","undefined","Date","parseTime","utcParse","timeParse","createLinearScale","data","size","axis","minValue","_data$minStacked","maxValue","_data$maxStacked","_ref$min","min","_ref$max","max","_ref$stacked","stacked","_ref$reverse","reverse","_ref$clamp","clamp","_ref$nice","nice","_ref$round","round","minStacked","maxStacked","scale","scaleLinear","range","interpolate","interpolateRound","interpolateNumber","domain","castLinearScale","typedScale","type","createPointScale","_spec","scalePoint","all","castPointScale","createBandScale","scaleBand","castBandScale","createTimeScale","normalize","scaleUtc","scaleTime","createLogScale","sign","_ref$base","base","some","v","Error","hasMixedSign","filter","Math","scaleLog","rangeRound","createSymlogScale","_ref$constant","constant","scaleSymlog","getOtherAxis","compareValues","a","b","compareDateValues","getTime","computeScale","spec","getDatumAxisPosition","datum","_scale","stackedValue","computeXYScalesForSeries","series","xScaleSpec","yScaleSpec","width","height","nestedSeries","map","serie","_extends","d","nestSerieData","xy","generateSeriesXY","stackX","stackY","xScale","x","yScale","y","computedSeries","position","generateSeriesAxis","scaleSpec","_temp","_ref$getValue","getValue","_ref$setValue","setValue","parseFloat","String","values","push","sortBy","uniq","apply","uniqBy","sort","last","stackAxis","otherAxis","compare","isDate","stack","find","stackValue","head","centerScale","bandwidth","offset","timeByType","timeMillisecond","utcMillisecond","timeSecond","utcSecond","timeMinute","utcMinute","timeHour","utcHour","timeInterval","step","getDate","start","end","floor","setUTCHours","setUTCDate","getUTCDate","week","timeWeek","utcWeek","sunday","timeSunday","utcSunday","monday","timeMonday","utcMonday","tuesday","timeTuesday","utcTuesday","wednesday","timeWednesday","utcWednesday","thursday","timeThursday","utcThursday","friday","timeFriday","utcFriday","saturday","timeSaturday","utcSaturday","timeMonth","utcMonth","timeYear","utcYear","timeTypes","Object","keys","timeIntervalRegexp","RegExp","join","getScaleTicks","Array","isArray","matches","match","amount","timeType","_timeType$every$range","_timeType$every","_scale$domain","originalStop","stop","every","Number","ticks","interval","isFinite"],"mappings":"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"}